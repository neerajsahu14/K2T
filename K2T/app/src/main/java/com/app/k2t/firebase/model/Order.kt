package com.app.k2t.firebase.model

import com.app.k2t.firebase.utils.OrderStatus
import com.google.firebase.firestore.DocumentId
import com.google.firebase.firestore.ServerTimestamp
import java.util.Date

/**
 * Represents an order in the system.
 *
 * This data class holds information about a customer's order, including its unique identifier,
 * associated items, pricing details, and statusCode.
 *
 * @property orderId The unique identifier for this order, generated by Firestore.
 * @property orderItemIds A list of IDs referencing the items included in this order.
 * @property subTotal The subtotal amount for the order, excluding tax and tip.
 * @property tax The tax amount applied to the order.
 * @property tip The tip amount added to the order.
 * @property totalPrice The total price of the order, including subtotal, tax, and tip.
 * @property transactionId The unique identifier for the payment transaction associated with this order.
 * @property tableID The identifier for the table where the order was placed (if applicable).
 * @property createdAt A [Date] timestamp indicating when the order was created.
 * @property status The current statusCode of the order (e.g., "in_progress", "completed").
 */
// Order model (main order information)
data class Order(
    @DocumentId
    var orderId: String? = null,

    var orderItemIds: List<String>? = null, // Reference IDs to OrderItem documents
    var subTotal: Double? = null,
    var tax: Double? = null,
    var tip: Double? = null,
    var totalPrice: Double? = null,
    var transactionId: String? = null,
    var tableID: String? = null,
    var tableNumber: String? = null,

    @ServerTimestamp
    var createdAt: Date? = null,
    var statusCode: Int? = OrderStatus.IN_PROGRESS.code
)


/**
 * Represents an item in an order.
 *
 * This data class holds information about a specific item within an order, including its
 * unique identifier, associated food item, quantity, pricing details, and statusCode.
 *
 * @property itemId The unique identifier for this order item, generated by Firestore.
 * @property orderId A reference to the parent order's unique identifier.
 * @property foodId The unique identifier of the food item associated with this order item.
 * @property quantity The quantity of the food item ordered.
 * @property unitPrice The price per unit of the food item.
 * @property totalPrice The total price for this order item (unit price * quantity).
 * @property statusCode The current statusCode of the order item (e.g., "pending", "completed").
 * @property addedAt A [Date] timestamp indicating when this item was added to the order.
 */
// OrderItem model (separate collection)
data class OrderItem(
    @DocumentId
    var itemId: String? = null,

    var orderId: String? = null, // Reference back to parent order
    var foodId: String? = null,
    var foodName : String? = null,
    var quantity: Int? = null,
    var unitPrice: Double? = null,
    var totalPrice: Double? = null,
    var tableId: String? = null,
    var tableNumber: String? = null,
    var chefId: String? = null,
    var statusCode: Int? = OrderStatus.PENDING.code, // Item-level statusCode

    @ServerTimestamp
    var addedAt: Date? = null
)



















